#!/usr/bin/ruby

class Sum(*values) {

    has cache = Hash()

    method -(Sum o) {
        Sum(values..., o.values.map{.neg}...)
    }

    method -(Object o) {
        var copy = [values...]
        if (copy.remove_first(o)) {
            Sum(copy...)
        }
        else {
            Sum(copy..., o.neg)
        }
    }

    method +(Sum o) {
        Sum(values..., o.values...)
    }

    method +(Object o) {
        var copy = [values...]
        if (copy.remove_first(o.neg)) {
            Sum(copy...)
        }
        else {
            Sum(copy..., o)
        }
    }

    #~ method *(Sum o) {
        #~ var terms = []
        #~ for i,j in (values ~X o.values) {
            #~ terms << i*j
        #~ }
        #~ Sum(terms...)
    #~ }

    method *(Object o) {
        Sum(values.map { _ * o }...)
    }

    method /(Object o) {
        Sum(values.map { _ / o }...)
    }

    # TODO: remove pairs of (x, -x)
    method alternatives() {
        cache{:alt} := do {
            gather {
                values.map{.alternatives}.cartesian { |*v|
                    take(
                        v.group_by {
                            .class
                        }.values.map {
                            .reduce('+')
                        }.sort_by {
                            .class
                        }.grep{ _ != 0 }.reduce('+') \\ 0
                    )
                }
            }.uniq_by { .to_s } || [0]
        }
    }

    method ==(Sum o) {
        values == o.values
    }

    method ==(_) {
        false
    }

    method neg {
        cache{:neg} := Sum(values.map{ .neg }...)
    }

    method numeric {
        cache{:num} := values.map { .numeric }.sum
    }

    method pretty() {
        cache{:pretty} := (
            values ? ('(' + values.map{.pretty}.join(' + ') + ')') : '0'
        )
    }

    method to_s {
        cache{:str} := "Sum(#{values.join(', ')})"
    }
}
