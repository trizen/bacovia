#!/usr/bin/ruby

class Sum(*values) {
    method -(Sum o) {
        Sum(values..., o.values.map{.neg}...)
    }

    method -(Object o) {
        var copy = [values...]
        #~ if (copy.remove_first(o)) {
            #~ Sum(copy...)
        #~ }
        #~ else {
            Sum(copy..., o.neg)
        #~ }
    }

    method +(Sum o) {
        Sum(values..., o.values...)
    }

    method +(Object o) {
        var copy = [values...]
        #~ if (copy.remove_first(o.neg)) {
            #~ Sum(copy...)
        #~ }
        #~ else {
            Sum(copy..., o)
        #~ }
    }

    #~ method *(Sum o) {
        #~ var terms = []
        #~ for i,j in (values ~X o.values) {
            #~ terms << i*j
        #~ }
        #~ Sum(terms...)
    #~ }

    method *(Object o) {
        Sum(values.map { _ * o }...)
    }

    method /(Object o) {
        Sum(values.map { _ / o }...)
    }

    # TODO: remove pairs of (x, -x)
    method alternatives() is cached {
        gather {
            values.map{.alternatives}.cartesian { |v|
                take (
                    v.group_by {
                        .class
                    }.values.map {
                        .reduce('+')
                    }.sort_by { .class }.reduce('+')
                )
            }
        }.uniq_by { .to_s }
    }

    method ==(Sum o) {
        values == o.values
    }

    method ==(_) {
        false
    }

    method neg {
        Sum(values.map{ .neg }...)
    }

    method numeric {
        values.map { .numeric }.sum
    }

    method pretty() is cached {
        values || return '0'
        '(' + values.map{.pretty}.join(' + ') + ')'
    }

    method to_s {
        "Sum(#{values.join(', ')})"
    }
}
