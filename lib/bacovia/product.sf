#!/usr/bin/ruby

class Product(*values) {
    method *(Product o) {
        Product(values..., o.values...)
    }

    method /(Product o) {
        Product(values..., o.values.map{.inv}...)
    }

    method /(Object o) {
        var copy = [values...]
        if (copy.remove_first(o)) {
            Product(copy...)
        }
        else {
            Product(copy..., o.inv)
        }
    }

    #~ method /(Object o) {
        #~ Product(values..., o.inv)
    #~ }

    method *(Object o) {
        var copy = [values...]
        if (copy.remove_first(o.inv)) {
            Product(copy...)
        }
        else {
            Product(copy..., o)
        }
    }

    #~ method *(Object o) {
        #~ Product(values..., o)
    #~ }

    method **(Object o) {
        Product(values.map{ _ ** o }...)
    }

    method neg {
        Product(-1, values...)
    }

    # TODO: remove pairs of (x, 1/x)
    method alternatives() is cached {
        gather {
            values.map{.alternatives}.cartesian { |v|
                take(
                    v.group_by {
                        .class
                    }.values.map {
                        .reduce('*')
                    }.sort_by { .class }.reduce('*')
                )
            }
        }.uniq_by { .to_s }
    }

    method ==(Product o) {
        values == o.values
    }

    method ==(_) {
        false
    }

    method inv {
        Product(values.map { .inv }...)
    }

    method numeric {
        values.map { .numeric }.prod
    }

    method pretty() is cached {
        values || return '1'
        '(' + values.map{.pretty}.join(' * ') + ')'
    }

    method to_s {
        "Product(#{values.join(', ')})"
    }
}
