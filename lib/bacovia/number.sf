#!/usr/bin/ruby

class Number {

    method +(Fraction o) {
        Fraction(self, 1) + o
    }

    method +(Difference o) {
        Difference(self, 0) + o
    }

    # Addition
    method +(Bacovia o) {
        #o + self
        Sum(self, o)
    }

    method -(Fraction o) {
        Fraction(self, 1) - o
    }

    method -(Difference o) {
        Difference(self, 0) - o
    }

    # Subtraction
    method -(Bacovia o) {
        #o.neg + self
        Difference(self, o)
    }

    method *(Fraction o) {
        Fraction(self, 1) * o
    }

    method *(Difference o) {
        Difference(self, 0) * o
    }

    # Multiplication
    method *(Bacovia o) {
        #o * self
        Product(self, o)
    }

    method /(Fraction o) {
        Fraction(self, 1) / o
    }

    # Division
    method /(Bacovia o) {
        #o.inv * self
        Fraction(self, o)
    }

    # Exponentiation
    method **(Bacovia o) {
        Power(self, o)
    }

    # Other
    method inv {
        Fraction(1, self)
    }

    method alternatives {
        [self]
    }

    method numeric {
        self
    }

    method pretty {
        with (self.is_rat ? self.as_rat : self.to_s) { |str|
            (str.contains(%r"\di\z|/")) ? "(#{str})" : str
        }
    }
}
