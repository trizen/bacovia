#!/usr/bin/ruby

class Difference(minuend, subtrahend) {

    has cache = Hash()

    subset T1 < Fraction, Number;

    #
    ## (a-b) + (x-y) = (a+x) - (b+y)
    #

    method +(Difference y) {
        Difference(
            minuend    + y.minuend,
            subtrahend + y.subtrahend
        )
    }

    method +(y < T1) {
        Difference(
            minuend + y,
            subtrahend
        )
    }

    #
    ## (a-b) - (x-y) = (a+y) - (b+x)
    #

    method -(Difference y) {
        Difference(
            minuend    + y.subtrahend,
            subtrahend + y.minuend
        )
    }

    method -(y < T1) {
        Difference(
            minuend,
            subtrahend + y
        )
    }

    #
    ## (a-b) * (x-y) = (a*x + b*y) - (b*x + a*y)
    #

    method *(Difference y) {
        Difference(
            (minuend    * y.minuend) + (subtrahend * y.subtrahend),
            (subtrahend * y.minuend) + (minuend    * y.subtrahend)
        )
    }

    method *(y < T1) {
        Difference(
            minuend    * y,
            subtrahend * y
        )
    }

    #~ method /(Difference y) {
        #~ Fraction(
            #~ (minuend   * y.minuend) - (minuend      * y.subtrahend) - (subtrahend   * y.minuend) + (subtrahend * y.subtrahend),
            #~ (y.minuend * y.minuend) + (y.subtrahend * y.subtrahend) - (y.subtrahend * y.minuend) - (y.minuend  * y.subtrahend)
        #~ )
    #~ }

    #~ method /(y < T1) {
        #~ Fraction(
            #~ minuend*y - subtrahend*y,
            #~ y * y
        #~ )
    #~ }

    method neg {
        Difference(
            subtrahend,
            minuend
        )
    }

    method ==(Difference y) {
        (minuend == y.minuend) &&
            (subtrahend == y.subtrahend)
    }

    method ==(_) {
        false
    }

    method numeric {
        cache{:num} := (minuend.numeric - subtrahend.numeric)
    }

    method pretty {
        cache{:pretty} := do {
            var a = minuend.pretty
            var b = subtrahend.pretty

            if (a == '0') {
                "(-#{b})"
            }
            elsif (b == '0') {
                a
            }
            else {
                "(#{a} - #{b})"
            }
        }
    }

    method to_s {
        cache{:str} := "Difference(#{minuend}, #{subtrahend})"
    }

    method alternatives {
        cache{:alt} := do {
            var a = minuend.alternatives
            var b = subtrahend.alternatives

            gather {
                for x,y in (a ~X b) {
                    if (y == 0) {
                        take(x)
                    }
                    elsif (x == 0) {
                        take(y.neg)
                    }
                    elsif (x == y) {
                        take(0)
                    }
                    else {
                        take(Difference(x, y))
                    }
                }
            }.uniq_by { .to_s }
        }
    }
}
