#!/usr/bin/ruby

class Exp(v) {

    has cache = Hash()

    method *(Exp o) {
        Exp(v + o.v)
    }

    method /(Exp o) {
        Exp(v - o.v)
    }

    method **(Object o) {
        Exp(v * o)
    }

    method alternatives() {
        cache{:alt} := do {
            gather {
                for a in (v.alternatives) {
                    take(Exp(a))

                    # Identity: exp(log(a) * b) = a^b
                    if (a.kind_of(Product) && (a.values.len == 2)) {
                        var (x, y) = a.values...
                        if (x.kind_of(Log)) {
                            take(Power(x.v, y).alternatives...)
                        }
                        elsif(y.kind_of(Log)) {
                            take(Power(y.v, x).alternatives...)
                        }
                    }
                    elsif (a.kind_of(Log)) {
                        take(a.v)
                    }
                }
            }.uniq_by { .to_s }
        }
    }

    method ==(Exp o) {
        v == o.v
    }

    method ==(_) {
        false
    }

    method inv {
        cache{:inv} := Exp(v.neg)
    }

    method numeric {
        v.numeric.exp
    }

    method pretty() {
        cache{:pretty} := "exp(#{v.pretty})"
    }

    method to_s {
        cache{:str} := "Exp(#{v})"
    }
}
