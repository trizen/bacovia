#!/usr/bin/ruby

class Exp(v) {
    method *(Exp o) {
        Exp(v + o.v)
    }

    method *(Object o) {
        Product(self, o)
    }

    method /(Exp o) {
        Exp(v + o.v.neg)
    }

    method /(Object o) {
        o.inv * self
    }

    method +(Object o) {
        Sum(self, o)
    }

    method -(Object o) {
        Sum(self, o.neg)
    }

    method **(Object o) {
        Exp(v * o)
    }

    method simplify {
        var simple = v.simplify
        given() {
            case (simple.kind_of(Log)) {
                simple.v
            }
            case (simple.kind_of(Product) && (simple.values.len == 2)) {
                var (a, b) = simple.values...
                if (a.class == :Log) {
                    Power(a.v, b)
                }
                elsif (b.class == :Log) {
                    Power(b.v, a)
                }
                else {
                    continue
                }
            }
            default {
                Exp(simple)
            }
        }
    }

    method neg {
        Product(-1, self)
    }

    method numeric {
        v.numeric.exp
    }

    method to_s {
        "Exp(#{v})"
    }
}
