#!/usr/bin/ruby

class Exp(v) {
    method *(Exp o) {
        Exp(v + o.v)
    }

    method /(Exp o) {
        Exp(v + o.v.neg)
    }

    method **(Object o) {
        Exp(v * o)
    }

    method alternatives {
        gather {
            for a in (v.alternatives) {
                take(Exp(a))

                # Identity: exp(log(a) * b) = a^b
                if (a.kind_of(Product) && (a.values.len == 2)) {
                    var (x, y) = a.values...
                    if (x.class == :Log) {
                        take(Power(x.v, y).alternatives...)
                    }
                    elsif(y.class == :Log) {
                        take(Power(y.v, x).alternatives...)
                    }
                }
                elsif (a.kind_of(Log)) {
                    take(a.v)
                }
            }
        }.uniq_by { .to_s }
    }

    method ==(Exp o) {
        v == o.v
    }

    method ==(_) {
        false
    }

    method inv {
        Exp(v.neg)
    }

    method numeric {
        v.numeric.exp
    }

    method pretty {
        "exp(#{v.pretty})"
    }

    method to_s {
        "Exp(#{v})"
    }
}
