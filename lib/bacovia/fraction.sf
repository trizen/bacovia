#!/usr/bin/ruby

class Fraction(num, den) {

    has cache = Hash()

    subset T1 < Difference, Number;

    method +(Fraction y) {
        Fraction(
            (num * y.den) + (den * y.num),
            (den * y.den)
        )
    }

    method +(y < T1) {
        Fraction(
            num + (y * den),
            den
        )
    }

    method -(Fraction y) {
        Fraction(
            (num * y.den) - (den * y.num),
            (den * y.den)
        )
    }

    method -(y < T1) {
        Fraction(
            num - (y * den),
            den
        )
    }

    method *(Fraction y) {
        Fraction(
            num * y.num,
            den * y.den,
        )
    }

    method *(y < T1) {
        Fraction(
            num * y,
            den
        )
    }

    method /(Fraction y) {
        Fraction(
            num * y.den,
            den * y.num
        )
    }

    method /(y < T1) {
        Fraction(
            num,
            den * y
        )
    }

    method inv {
        cache{:inv} := Fraction(den, num)
    }

    method ==(Fraction o) {
        (o.num == num) &&
        (o.den == den)
    }

    method ==(_) {
        false
    }

    method alternatives() {
        cache{:alt} := do {
            gather {
                for a,b in (num.alternatives ~X den.alternatives) {
                    if (b == 1) {
                        take(a)
                    }

                    if (a == b) {
                        take(1)
                    }

                    take(Fraction(a, b))

                    if (a.kind_of(Number) && b.kind_of(Number)) {
                        take(a / b)
                    }
                }
            }.uniq_by { .to_s }
        }
    }

    method numeric {
        cache{:num} := (num.numeric / den.numeric)
    }

    method pretty() {
        cache{:pretty} := "(#{num.pretty}/#{den.pretty})"
    }

    method to_s {
        cache{:str} := "Fraction(#{num}, #{den})"
    }
}
