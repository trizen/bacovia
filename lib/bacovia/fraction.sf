#!/usr/bin/ruby

class Fraction {

    Perl.eval(['unshift(@', __CLASS__, '::ISA, "', Bacovia, '");'].join)

    __CLASS__.undef_method('pow')
    __CLASS__.undef_method('**')

    subset T1 < Difference, Number;

    method +(Fraction y) {
        Fraction(
            (self.num * y.den) + (self.den * y.num),
            (self.den * y.den)
        )
    }

    method +(y < T1) {
        Fraction(
            self.num + (y * self.den),
            self.den
        )
    }

    method +(Bacovia y) {
        Sum(self, y)
    }

    method -(Fraction y) {
        Fraction(
            (self.num * y.den) - (self.den * y.num),
            (self.den * y.den)
        )
    }

    method -(y < T1) {
        Fraction(
            self.num - (y * self.den),
            self.den
        )
    }

    method -(Bacovia y) {
        Difference(self, y)
    }

    method *(Fraction y) {
        Fraction(
            self.num * y.num,
            self.den * y.den,
        )
    }

    method *(y < T1) {
        Fraction(
            self.num * y,
            self.den
        )
    }

    method *(Bacovia y) {
        Product(self, y)
    }

    method /(Fraction y) {
        Fraction(
            self.num * y.den,
            self.den * y.num
        )
    }

    method /(y < T1) {
        Fraction(
            self.num,
            self.den * y
        )
    }

    method /(Bacovia y) {
        Fraction(self, y)
    }

    method inv {
        Fraction(self.den, self.num)
    }

    method neg {
        Fraction(self.num.neg, self.den)
    }

    method ==(Fraction o) {
        (o.num == self.num) &&
        (o.den == self.den)
    }

    method ==(_) {
        false
    }

    method alternatives() {
        gather {
            for a,b in (self.num.alternatives ~X self.den.alternatives) {
                if (b == 1) {
                    take(a)
                }

                if (a == b) {
                    take(1)
                }

                take(Fraction(a, b))

                if (a.kind_of(Number) && b.kind_of(Number)) {
                    take(a / b)
                }
            }
        }.uniq_by { .to_s }
    }

    method numeric {
        self.num.numeric / self.den.numeric
    }

    method pretty() {
        "(#{self.num.pretty}/#{self.den.pretty})"
    }

    method to_s {
        "Fraction(#{self.num}, #{self.den})"
    }
}
