#!/usr/bin/ruby

class Power(v, n) {

    has cache = Hash()

    method **(Object o) {
        Power(v, n * o)
        #Power(self, o)
    }

    method ==(Power o) {
        (v == o.v) &&
        (n == o.n)
    }

    method ==(_) {
        false
    }

    #~ method /(Power o) {
        #~ if (o.v == v) {
            #~ Power(v, n - o.n)
        #~ }
        #~ else {
            #~ Product(self, o.inv)
        #~ }
        #~ Fraction(self, o)
    #~ }

    #~ method *(Power o) {
        #~ if (o.v == v) {
            #~ Power(v, n + o.n)
        #~ }
        #~ else {
            #~ Product(self, o)
        #~ }
    #~ }

    method inv {
        cache{:inv} := Power(v, n.neg)
    }

    method alternatives() {
        cache{:alt} := do {
            gather {
                for a,b in (v.alternatives ~X n.alternatives) {

                    take(a ** b)
                    take(Power(a, b))
                    #take(Exp(Log(a) * b))

                    # Identity: x^0 = 1
                    if (b == 0) {
                        take(1)
                    }

                    # Identity: 1^x = 1
                    if (a == 1) {
                        take(1)
                    }

                    # Identity: x^1 = x
                    if (b == 1) {
                        take(a)
                    }

                    # Identity: (a/b)^x = a^x / b^x
                    if (a.kind_of(Fraction)) {
                        take(a.num**b / a.den**b)
                    }

                    # Identity: x^2 = x*x
                    #~ if (b == 2) {
                        #~ take(a * a)
                    #~ }

                    # Identity: x^log(y) = y^log(x)
                    if (b.kind_of(Log)) {
                        take(b.v**Log(a))
                    }

                    # Identity: exp(x)^log(y) = y^x
                    if (a.kind_of(Exp) && b.kind_of(Log)) {
                        take(b.v**a.v)
                    }

                    # Identity: exp(x)^y = exp(y*x)
                    if (a.kind_of(Exp)) {
                        take(Exp(a.v * b))
                    }

                    # Identity: x^(y/log(x)) = exp(y)
                    if (b.kind_of(Fraction) && b.den.kind_of(Log) && (a == b.den.v)) {
                        if (b.num.kind_of(Log)) {
                            take(b.num.v)
                        }
                        else {
                            take(Exp(b.num).alternatives...)
                        }
                    }
                }
            }.uniq_by { .to_s }
        }
    }

    method numeric {
        cache{:num} := (v.numeric ** n.numeric)
    }

    method pretty() {
        cache{:pretty} := do {
            var base = v.pretty
            var pow = n.pretty

            if (base.begins_with('-')) {
                "(#{base})^#{pow}"
            }
            elsif (v.kind_of(Power)) {
                "(#{base})^#{pow}"
            }
            else {
                "#{base}^#{pow}"
            }
        }
    }

    method to_s {
        cache{:str} := "Power(#{v}, #{n})"
    }
}
