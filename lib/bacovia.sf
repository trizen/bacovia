#!/usr/bin/ruby

# Daniel "Trizen" È˜uteu
# License: GPLv3
# Date: 26 February 2017
# https://github.com/trizen

# A symbolic math library for Sidef.

class Bacovia            {}
class Power    < Bacovia {}
class Fraction < Bacovia {}
class Sum      < Bacovia {}
class Product  < Bacovia {}
class Log      < Bacovia {}
class Exp      < Bacovia {}
class Symbol   < Bacovia {}

include("bacovia/*.sf")

class Bacovia {

    #const I = Exp(Fraction(1, 2) * Log(-1))
    const I = Power(-1, Fraction(1, 2))

    method sin {
        Fraction(Exp(I * self) - Exp(-I * self), (2*I))
    }

    method cos {
        Fraction(Exp(-I * self) + Exp(I * self), 2)
    }

    method +(Object o) {
        Sum(self, o)
    }

    method -(Object o) {
        Sum(self, o.neg)
    }

    method *(Object o) {
        Product(self, o)
        #Fraction(self, o.inv)
    }

    method /(Object o) {
        #Product(self, o.inv)
        Fraction(self, o)
    }

    method neg {
        Product(-1, self)
    }

    method inv {
        Fraction(1, self)
    }

    method **(Object o) {
        Power(self, o)
    }

    method alternatives {
        [self]
    }

    method simplify {
        self.alternatives.min_by { |e|
            e.kind_of(Number) ? -1 : (
                e.kind_of(Complex) ? 0 : e.to_s.len
            )
        }
    }

    method i {
        Product(I, self)
    }
}
